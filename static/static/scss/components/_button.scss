///////////////
//  BUTTONS  //
///////////////

@mixin button-small {
  border-radius: $hx-border-radius-sm;
  font-size: $hx-font-size-xs;
}

@mixin button-medium {
  font-size: $hx-font-size-base;
}

@mixin button-large {
  font-size: $hx-font-size-lg;
}

button.#{$namespace}-button,
a.#{$namespace}-button,
.#{$namespace}-button {
  @include control;
  @include no-copy;

  border-radius: $hx-border-radius-sm;
  background-color: $hx-button-background;
  border: 1px solid $hx-button-border;
  color: $hx-button;
  cursor: pointer;
  justify-content: center;
  padding-left: 0.75rem;
  padding-right: 0.75rem;
  text-align: center;
  white-space: nowrap;
  transition: all 0.15s ease-in-out;

  // text-transform: uppercase;
  font-weight: 400;
  font-family: $hx-font-family-base;

  strong {
    color: inherit;
  }

  .#{$namespace}-icon-control {
    &:first-child:not(:last-child) {
      margin-left: calc(-0.1rem - 1px);
      margin-right: 0.3rem;
    }

    &:last-child:not(:first-child) {
      margin-left: 0.3rem;
      margin-right: calc(-0.1rem - 1px);
    }

    &:first-child:last-child {
      margin-left: calc(-0.375em - 1px);
      margin-right: calc(-0.375em - 1px);
    }

    &,
    &.is-small,
    &.is-medium,
    &.is-large {
      position: relative;
      top: 0;
      display: inline-block;
      font-style: normal;
      font-weight: 400;
      line-height: 1;
      -webkit-font-smoothing: antialiased;
      margin: 0;
      height: auto;
      width: auto;
      .#{$namespace}-icon {
        height: auto;
        width: auto;
      }
    }
  }

  // States
  &:hover,
  &.is-hovered {
    border-color: rgba($hx-button-hover-border, 0.5);
    color: $hx-button-hover;
    text-decoration: none;
  }

  &:focus,
  &.is-focused {
    border-color: rgba($hx-button-focus-border, 0.5);
    box-shadow: 0 0 0.5em rgba($hx-button-focus-border, 0.35);
    color: $hx-button-focus;
    text-decoration: none;
  }

  &:active,
  &.is-active {
    border-color: rgba($hx-button-active-border, 0.5);
    box-shadow: $hx-button-shadow-inset;
    color: $hx-button-active;
    text-decoration: none;
    background-color: rgba($hx-color-gray-lightest, 0.3);
  }

  // Colors
  &.is-link {
    background-color: transparent;
    border-color: transparent;
    color: $hx-text;
    text-decoration: underline;

    &:hover,
    &.is-hovered,
    &:focus,
    &.is-focused,
    &:active,
    &.is-active {
      background-color: $hx-background-color;
      color: $hx-text-strong;
    }
  }

  // is-white, is-black, is-light ... is-info, is-success, is-warning ... is-red, is-blue ...
  $transparent-inverted: (
    "transparent-inverted": (
      transparent,
      $hx-color-white,
    ),
  );
  $hx-colors-buttons: map-merge($hx-colors, $transparent-inverted);

  @each $name, $pair in $hx-colors-buttons {
    $color: nth($pair, 1);
    $hx-color-invert: nth($pair, 2);

    &.is-#{$name} {
      background-color: $color;
      border-color: transparent;
      color: $hx-color-invert;

      &:hover,
      &.is-hovered {
        background-color: darken($color, 10%);
        border-color: transparent;
        color: findColorInvert(darken($color, 10%));
      }

      &:focus,
      &.is-focused {
        border-color: transparent;
        box-shadow: 0 0 0.5em rgba($color, 0.35);
        color: $hx-color-invert;
      }

      &:active,
      &.is-active {
        background-color: darken($color, 5%);
        border-color: transparent;
        box-shadow: $hx-button-shadow-inset;
        color: findColorInvert(darken($color, 5%));
      }

      &.is-loading {
        &::after {
          border-color: transparent transparent $hx-color-invert $hx-color-invert !important;
        }
      }

      &.is-outlined {
        background-color: transparent;
        border-color: rgba($color, 0.5);
        color: $color;

        &:hover,
        &:focus {
          background-color: $color;
          border-color: rgba($color, 0.5);
          color: $hx-color-invert;
        }

        &.is-loading {
          &::after {
            border-color: transparent transparent $color $color !important;
          }
        }
      }
    }
  }

  &.is-transparent-inverted {
    &:hover,
    &.is-hovered {
      background-color: rgba($hx-color-black, 0.1);
      border-color: transparent;
      color: rgba($hx-color-white, 0.85);
    }
  }

  &.is-transparent {
    &:hover {
      background-color: rgb(0 0 0 / 5%);
    }
  }

  // Sizes
  &.is-small {
    @include button-small;

    &:not(.is-round) {
      .#{$namespace}-icon-control {
        * {
          font-size: 14px;
        }
      }
    }
  }

  &.is-medium {
    @include button-medium;
  }

  &.is-large {
    @include button-large;
  }

  // Modifiers
  &[disabled],
  &.is-disabled {
    opacity: 0.5;
  }

  &.is-fullwidth {
    display: flex;
    width: 100%;
  }

  &.is-loading {
    color: transparent !important;
    pointer-events: none;

    &::after {
      @include loader;
      @include center(1em);

      position: absolute !important;
    }
  }

  &.is-round {
    width: 3.5rem;
    height: 3.5rem;
    border-radius: 50%;
    text-align: center;
    margin-left: 0.25rem;
    margin-right: 0.25rem;

    .#{$namespace}-icon-control {
      margin-top: 1px;
    }

    &.is-small {
      width: 2.5rem;
      height: 2.5rem;
    }

    &.is-large {
      width: 4.5rem;
      height: 4.5rem;
    }

    .#{$namespace}-icon {
      &.is-large {
        height: 3rem;
      }
    }
  }

  &.is-flat {
    background-color: transparent;
    border: none;
    font-weight: 400;

    &:hover,
    &.is-active {
      background-color: rgb(0 0 0 / 5%);
    }

    @each $name, $pair in $hx-colors {
      $color: nth($pair, 1);
      $hx-color-invert: nth($pair, 2);

      &.is-#{$name} {
        color: $color;

        &:hover,
        &.is-hovered {
          background-color: rgba($color, 0.1);
          color: $color;
        }

        &:focus,
        &.is-focused {
          background-color: rgba($color, 0.35);
        }

        &:active,
        &.is-active {
          background-color: rgba($color, 0.1);
          box-shadow: none;
        }
      }
    }
  }

  &.is-text-multiline {
    @include multiline;
  }
}

.#{$namespace}-delete {
  @include delete;

  &.#{$namespace}-icon-control {
    display: flex;
    justify-content: center;
    align-items: center;

    &::before,
    &::after {
      height: 0;
      width: 0;
      transition: 0;
    }
  }

  &.is-transparent {
    background-color: transparent;

    &::before,
    &::after {
      background-color: rgb(0 0 0 / 50%);
    }

    &:hover {
      &::before,
      &::after {
        background-color: white;
      }
    }
  }

  &.is-small {
    // specific to accommodate small delete circle
    // can be abstracted to -icon.is-xsmall
    &.#{$namespace}-icon-control > .#{$namespace}-icon.is-small {
      height: 0.75rem;
      width: 0.75rem;
      font-size: 0.75rem;
    }
  }

  &.is-large {
    height: 36px;
    width: 36px;
  }
}

.#{$namespace}-info {
  width: 20px;
  height: 20px;
  border-radius: 100%;
  margin-left: -0.5em;
  margin-right: 0.5em;
  background-color: rgb(255 255 255 / 80%);
  border: 1px solid transparent;
  position: relative;
  outline: none;
  transition: 0.3s;
  color: $hx-color-black;

  &:hover {
    background-color: rgb(0 0 0 / 10%);
  }

  &.is-small {
    width: 16px;
    height: 16px;
  }

  &::before {
    content: "\e94f";
    font-family: hxui;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 1rem;
  }
}

// Adjustment for vertical spacing
button.#{$namespace}-button,
input[type="submit"].button {
  line-height: 1;
  padding-bottom: 0.4em;
  padding-top: 0.35em;
}

// Button group
.#{$namespace}-button-group {
  display: flex;
  flex-direction: row;
  > .#{$namespace}-button {
    margin-right: 0;
    margin-left: -1px;
    border-radius: 0;

    &.is-active {
      z-index: 1;
    }

    &.is-light {
      border-left: 1px solid rgba($hx-color-white, 1);
    }

    &.is-dark,
    &.is-black,
    &.is-success,
    &.is-primary,
    &.is-info,
    &.is-warning,
    &.is-danger {
      border-left: 1px solid rgba($hx-color-white, 0.3);
    }

    &:first-child {
      border-top-left-radius: $hx-border-radius-sm;
      border-bottom-left-radius: $hx-border-radius-sm;

      &.is-light,
      &.is-dark,
      &.is-black,
      &.is-primary,
      &.is-success,
      &.is-info,
      &.is-warning,
      &.is-danger {
        border-left-color: transparent;
      }
    }

    &:last-child {
      border-top-right-radius: $hx-border-radius-sm;
      border-bottom-right-radius: $hx-border-radius-sm;
    }

    &:hover {
      z-index: 1;
    }
  }

  &.has-text-centered {
    justify-content: center;
  }

  &.has-text-right {
    justify-content: flex-end;
  }

  &.is-fullwidth {
    > .#{$namespace}-button {
      flex: 1 0 auto;
    }

    &.is-justified {
      > .#{$namespace}-button {
        flex: 1;
      }
    }
  }
}

.#{$namespace}-button-split {
  display: inline-flex;
  .#{$namespace}-button:first-child {
    border-bottom-right-radius: 0;
    border-top-right-radius: 0;
    border-right: none;
  }
  .#{$namespace}-button:nth-child(2) {
    border-bottom-left-radius: 0;
    border-top-left-radius: 0;
    width: 1rem;
    border-left-color: rgb(255 255 255 / 30%);
  }
}
