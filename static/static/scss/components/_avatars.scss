///////////////
//  AVATARS  //
///////////////

.#{$namespace}-avatar {
  min-height: 30px;
  min-width: 30px;
  background-size: cover;
  position: relative;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  border-radius: 50%;
  line-height: 1;
  font-weight: 500;

  // === Color Variation === //
  // default (grey) color
  background-color: $hx-color-gray-lightest;
  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.05);

  // === Sizing Variation === //
  // default (medium) sizing
  width: 48px;
  height: 48px;
  font-size: 1.5rem;

  // === Tiled Variation === //
  &.is-tile {
    border-radius: 0;
  }

  // === Icon Variation === //
  &.has-icon {
    // default (medium) sizing
    .#{$namespace}-icon {
      font-size: 1.65rem;
    }
  }

  // === Sizing Variations === //
  &.is-small {
    width: 30px;
    height: 30px;
    font-size: 1.25rem;

    &.has-icon {
      .#{$namespace}-icon {
        font-size: 1.25rem;
      }
    }
  }

  &.is-large {
    width: 64px;
    height: 64px;
    font-size: 2rem;

    &.has-icon {
      .#{$namespace}-icon {
        font-size: 2rem;
      }
    }
  }

  // === Color Variations === //
  // is-white, is-black, is-light ... is-info, is-success, is-warning ... is-red, is-blue ...
  $transparent-inverted: (
    "transparent-inverted": (
      transparent,
      $hx-color-white,
    ),
  );
  $hx-colors-buttons: map-merge($hx-colors, $transparent-inverted);

  @each $name, $pair in $hx-colors-buttons {
    $color: nth($pair, 1);
    $hx-color-invert: nth($pair, 2);

    &.is-#{$name} {
      background-color: $color;
      border-color: transparent;
      color: $hx-color-invert;

      // === Outlined Variation === //
      // must be used in combination with a color selector ^^^
      &.is-outlined {
        background-color: transparent;
        color: $color;
        border-color: rgba($color, 1);
        border-width: 1px;
        border-style: solid;
      }
    }
  }
}
