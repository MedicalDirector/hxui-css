//////////////
//  BUTTON  //
//////////////

@use "sass:list";
@use "sass:map";
@use "sass:color";

@use "../../variables" as *;
@use "../../functions/color" as c;
@use "../../functions/size" as fsize;

@use "./mixins" as button;
@use "../../mixins/position";
@use "../../mixins/text";
@use "../../mixins/loader" as *;
@use "../../mixins/state";
@use "../../mixins/context" as ctx;
@use "../../mixins/size";

@use "../../mixins/deprecate" as *;

.#{$namespace}-button {
  @include button.control;

  // Priority: Secondary is default
  @include button.variant-normal-priority-secondary;

  // Size: Medium is default
  @include button.size-medium;

  //////////////
  // Priority //
  //////////////

  // TODO: refactor
  $transparent-inverted: (
    "transparent-inverted": (
      transparent,
      $hx-color-white,
    ),
  );
  $hx-colors-buttons: map.merge($hx-colors, $transparent-inverted);

  @each $name, $pair in $hx-colors-buttons {
    $color: list.nth($pair, 1);
    $hx-color-invert: list.nth($pair, 2);

    &.is-#{$name},
    &.#{$name} {
      background-color: $color;
      border-color: transparent;
      color: $hx-color-invert;

      @include state.hover {
        background-color: color.scale($color, $lightness: -10%);
        border-color: transparent;
        color: c.invert(color.scale($color, $lightness: -10%));
      }

      @include state.focus {
        border-color: transparent;
        color: $hx-color-invert;
      }

      @include state.active {
        background-color: color.scale($color, $lightness: -5%);
        border-color: transparent;
        box-shadow: $hx-button-shadow-inset;
        color: c.invert(color.scale($color, $lightness: -5%));
      }
    }
  }

  @include deprecate("3.0.0", "Use .is-flat instead") {
    &.is-transparent-inverted {
      &:hover,
      &.is-hovered {
        background-color: rgba($hx-color-black, 0.1);
        border-color: transparent;
        color: rgba($hx-color-white, 0.85);
      }
    }

    &.is-transparent {
      &:hover {
        background-color: rgba(0, 0, 0, 0.05);
      }
    }
  }

  ///////////
  // Sizes //
  ///////////

  @include size.sm {
    @include deprecate("2.0.0", "No longer part of HXUI") {
      &:not(.is-round) {
        .#{$namespace}-icon-control {
          * {
            font-size: 14px;
          }
        }
      }
    }
  }

  @include button.variant-size;

  ////////////////
  // With icons //
  ////////////////

  .#{$namespace}-icon-control,
  .#{$namespace}-icon-container {
    @include deprecate("2.0.0", "No longer part of HXUI") {
      // start icon
      &:first-child:not(:last-child) {
        margin-left: calc(-0.1rem - 1px);
        margin-right: 0.3rem;
      }

      // end icon
      &:last-child:not(:first-child) {
        margin-left: 0.3rem;
        margin-right: calc(-0.1rem - 1px);
      }

      // icon only
      &:first-child:last-child {
        margin-left: calc(-0.375em - 1px);
        margin-right: calc(-0.375em - 1px);
      }

      &,
      &.is-small,
      &.is-medium,
      &.is-large {
        position: relative;
        top: 0;
        display: inline-block;
        font-style: normal;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        margin: 0;
        height: auto;
        width: auto;
        .#{$namespace}-icon {
          height: auto;
          width: auto;
        }
      }
    }
  }

  //////////////
  // Variants //
  //////////////

  // FILLED + OUTLINED
  @include button.variant-normal;

  @include deprecate("3.0.0", "Use .is-flat instead") {
    &.is-transparent-inverted {
      &:hover,
      &.is-hovered {
        background-color: rgba($hx-color-black, 0.1);
        border-color: transparent;
        color: rgba($hx-color-white, 0.85);
      }
    }

    &.is-transparent {
      &:hover {
        background-color: rgba(0, 0, 0, 0.05);
      }
    }
  }

  // ROUND
  @include deprecate("2.0.0", "No longer part of HXUI") {
    &.is-round {
      width: 3.5rem;
      height: 3.5rem;
      border-radius: 50%;
      text-align: center;
      margin-left: 0.25rem;
      margin-right: 0.25rem;

      .#{$namespace}-icon-control {
        margin-top: 1px;
      }

      &.is-small {
        width: 2.5rem;
        height: 2.5rem;
      }

      &.is-large {
        width: 4.5rem;
        height: 4.5rem;
      }

      .#{$namespace}-icon {
        &.is-large {
          height: 3rem;
        }
      }
    }
  }

  // FLAT
  &.is-flat,
  &.flat {
    @include deprecate("2.0.0", "Use newer color variations") {
      background-color: transparent;
      border: 1px solid transparent;

      &:hover,
      &.is-active {
        background-color: rgba(0, 0, 0, 0.05);
      }

      @each $name, $pair in $hx-colors {
        $color: list.nth($pair, 1);
        $hx-color-invert: list.nth($pair, 2);

        &.is-#{$name} {
          color: $color;

          @include state.hover {
            background-color: rgba($color, 0.1);
            color: $color;
          }

          @include state.active {
            background-color: rgba($color, 0.1);
          }
        }
      }
    }

    // Priority: Secondary is default
    @include button.variant-flat-priority-secondary;

    @include button.variant-flat;
  }

  // LINK
  &.is-link,
  &.link {
    text-decoration: underline;
  }

  // LOADING
  @include button.variant-loading;

  ///////////////
  // Modifiers //
  ///////////////

  &.is-text-multiline,
  &.multiline {
    @include text.multiline;
  }

  &.is-fullwidth,
  &.fullwidth {
    display: flex;
    width: 100%;
  }
}
