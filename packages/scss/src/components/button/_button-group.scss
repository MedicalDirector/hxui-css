/* stylelint-disable scss/dollar-variable-pattern */

////////////////////
//  BUTTON GROUP  //
////////////////////

@use "sass:map";
@use "../../variables" as *;

@use "../../functions/size";
@use "../../mixins/size" as msize;
@use "../../mixins/state";
@use "../../mixins/context";
@use "./mixins" as button;

@use "../../mixins/deprecate" as *;

$_no-borders: "secondary" "tertiary";

/// check whether value is contained in list
@function contains($list, $var) {
  $_out: false;
  @each $item in $list {
    @if $item == $var {
      $_out: true;
    }
  }
  @return $_out;
}

/// adds border to either "left", "right" or "both sides
@mixin border($side: "both") {
  @each $p in button.$priorities {
    @if not contains($_no-borders, $p) {
      @include context.add($p) {
        @each $s in button.$states {
          @include state.add($s) {
            @if $side == "left" or $side == "both" {
              border-left-color: var(--button-#{$p}-#{$s}-color);
            }
            @if $side == "right" or $side == "both" {
              border-right-color: var(--button-#{$p}-#{$s}-color);
            }
          }
        }
      }
    }
  }
}

/// core rules for .button-group and .button-split
@mixin grouping {
  display: inline-flex;

  .#{$namespace}-button {
    &:first-child {
      border-bottom-right-radius: 0;
      border-top-right-radius: 0;
      @include border($side: "right");
    }

    &:not(:first-child):not(:last-child) {
      border-radius: 0;
      @include border($side: "both");
    }

    @each $p in button.$priorities {
      @if contains($_no-borders, $p) {
        @include state.hover {
          z-index: 1;
        }

        @include state.active {
          z-index: 1;
        }

        @include state.focus($visible: true) {
          z-index: 1;
        }
      }
    }

    &:not(:last-child) {
      $bw-d: button.$border-width-default;

      // default
      margin-right: calc((-1) * size.px(--button-medium-border-width, $bw-d));

      @each $s, $l in button.$sizes {
        @include msize.add($s, $l) {
          margin-right: calc((-1) * size.px(--button-#{$s}-border-width, $bw-d));
        }
      }
    }

    &:last-child {
      border-bottom-left-radius: 0;
      border-top-left-radius: 0;
      @include border($side: "left");
    }
  }
}

.#{$namespace}-button-group {
  @include grouping;

  ///////////////
  // Modifiers //
  ///////////////

  @include deprecate("2.0.0", "Use custom css") {
    &.has-text-centered,
    &.text-center {
      justify-content: center;
    }

    &.has-text-right,
    &.text-right {
      justify-content: flex-end;
    }
  }

  &.is-fullwidth,
  &.fullwidth {
    display: flex; // for when inside flex container
    width: 100%; // for when inside block container

    > .#{$namespace}-button {
      flex: 1 1 0%;
    }

    @include deprecate("2.0.0", "Use .fullwidth only") {
      &.is-justified {
        > .#{$namespace}-button {
          flex: 1;
        }
      }
    }
  }
}

////////////////////
//  SPLIT BUTTON  //
////////////////////

.#{$namespace}-button-split {
  @include grouping;
}
