/* stylelint-disable selector-class-pattern */
///////////
//  NAV  //
///////////

@use "../../variables" as *;
@use "../../mixins/border-radius" as round;
@use "../../mixins/state";
@use "../../mixins/transition";
@use "../../mixins/text";
@use "../../mixins/deprecate" as *;

@use "../../functions/spacing";
@use "../../functions/size";

/* stylelint-disable-next-line scss/at-mixin-pattern */
@mixin _label {
  > span,
  > div {
    &:not(.#{$namespace}-icon-control),
    &:not(.#{$namespace}-icon-container),
    &:not(.#{$namespace}-icon),
    &:not(.icon) {
      @content;
    }
  }

  .#{$namespace}-nav-label {
    @content;
  }
}

:where(.#{$namespace}-drawer-container) {
  &:not(.bottom) :where(.#{$namespace}-sidebar, .#{$namespace}-drawer) {
    .#{$namespace}-nav {
      width: size.rem(240);
    }

    &:is(.is-collapsed, .collapsed, [aria-expanded="false"]) {
      .#{$namespace}-nav {
        width: 0;
      }
    }

    &:is(.is-minified, .mini) {
      .#{$namespace}-nav {
        width: size.rem(56);
      }
    }
  }
}

.#{$namespace}-nav {
  display: flex;
  gap: spacing.rem(1);
  @include transition.dimensions(300ms);

  &.#{$namespace}-nav-vertical,
  &.is-vertical,
  &.vertical,
  :where(.#{$namespace}-drawer-container):not(.bottom) & {
    flex-direction: column;
    align-items: stretch;

    &:not(:has(.#{$namespace}-nav-section)) {
      padding: 0 spacing.px(3);
    }

    @include deprecate("2.0.0", "Use a flex display with .hx-spacer or flex-grow") {
      &.is-bottom {
        position: absolute;
        bottom: 0;
        width: 100%;
        padding-bottom: 1rem;
      }
    }
  }

  &.is-centered,
  &.center,
  :where(.#{$namespace}-drawer-container).bottom & {
    justify-content: center;
  }

  &.is-right,
  &.right {
    justify-content: flex-end;
  }

  @mixin nav-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  @include nav-list;

  :where(li, ul) {
    @include nav-list;
  }

  :where(li, li[role="none"]) {
    display: contents;
  }
}

/////////////
// SECTION //
/////////////
/// for containing a heading and a list of items
.#{$namespace}-nav-section + .#{$namespace}-nav-section {
  .#{$namespace}-nav-heading {
    box-shadow: 0 -1px 0 0 rgba(0, 0, 0, 0.05); //TODO: unhard var(--color-border-default);
  }
}

//////////
// LIST //
//////////
/// for containing a list of items
.#{$namespace}-nav-list {
  display: flex;
  padding: 0 spacing.px(3);
  margin: 0;
  gap: spacing.rem(1);

  :where(.#{$namespace}-nav).vertical & {
    flex-direction: column;
    align-self: stretch;

    &[aria-expanded="false"]:not(.with-inert) {
      display: none;
    }

    // still keyboard-focusable if "inert" html attribute not applied
    &.with-inert {
      transition-property: max-height, margin;
      transition-duration: 300ms;
      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);

      &[aria-expanded="true"] {
        max-height: 100%;
      }

      &[aria-expanded="false"] {
        max-height: 0;
        margin-bottom: -1 * size.rem(4);
      }
    }
  }
}

/////////////
// HEADING //
/////////////

.#{$namespace}-nav-heading {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: spacing.rem(1) spacing.px(3) 0 spacing.px(6); //spacing.rem(1) spacing.px(6);
  font: var(--h6);
  font-weight: 700;
  color: var(--color-foreground-muted);
  background-color: transparent;
  border: none;
  text-transform: uppercase;
  cursor: pointer;
  width: 100%;

  @include _label {
    @include text.truncate;
  }

  //////////////
  // Variants //
  //////////////

  // MINI
  :where(.mini, .is-minified) & {
    text-align: center;
  }
}

//////////
// ITEM //
//////////

.#{$namespace}-nav-link {
  display: flex;
  align-items: center;
  opacity: 1;
  padding: spacing.rem(1.5) size.px(6);
  border: none;
  background-color: transparent;
  font: var(--h5);
  color: var(--color-foreground-default);
  text-decoration: none;
  text-align: left;
  border-radius: size.rem(16);
  cursor: pointer;
  white-space: nowrap;

  @include transition.colors;

  /* START bit with note; still keyboard-focusable if "inert" html attribute not applied to .hx-nav */
  :where(.#{$namespace}-nav-list).with-inert & {
    transition-property: opacity, color, background-color, border-color, text-decoration-color, fill, stroke;
    transition-duration: 300ms, 150ms, 150ms, 150ms, 150ms, 150ms, 150ms;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  }

  :where(.#{$namespace}-nav-list)[aria-expanded="false"].with-inert & {
    opacity: 0;
  }
  /* END bit with note */

  @include state.hover {
    background-color: var(--color-action-secondary-active);
  }

  @include state.active {
    color: var(--color-foreground-primary);
    background-color: var(--color-surface-primary-muted);
  }

  // Disabled state lightens text and removes hover/tab effects
  @include state.disable {
    // TODO: fix
    opacity: 0.3;
    cursor: not-allowed;
  }

  ////////////////
  // With icons //
  ////////////////

  .#{$namespace}-icon-control,
  .#{$namespace}-icon-container {
    display: contents;
  }

  @include _label {
    padding: 0 size.px(6);
    @include text.truncate;

    width: 100%;
    transition-property: padding, width, opacity, color, background-color, border-color, text-decoration-color, fill,
      stroke;
    transition-duration: 150ms;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  }

  //////////////
  // Variants //
  //////////////

  // THEMING
  :where(.#{$namespace}-bg-primary-gradient, .bg-primary-gradient, .has-blue-gradient, .has-purple-gradient, .has-orange-gradient)
    & {
    color: var(--color-foreground-contrast);

    @include state.hover {
      background-color: rgba(0, 0, 0, 0.5);
      color: var(--color-foreground-contrast);
    }

    @include state.active {
      background-color: rgba(0, 0, 0, 0.5);
      color: var(--color-foreground-contrast);
    }
  }

  // MINI
  :where(.#{$namespace}-sidebar, .#{$namespace}-drawer):is(.mini, .is-minified) & {
    padding: spacing.rem(1.5);
    border-radius: size.rem(16);

    @include _label {
      opacity: 0;
      width: 0;
      padding: 0;
    }
  }

  // BOTTOM
  :where(.#{$namespace}-drawer-container).bottom :where(.#{$namespace}-nav):not(.vertical) & {
    align-self: center;
  }
}

.#{$namespace}-nav-brand {
  padding: spacing.rem(4) spacing.px(3);
  display: flex;
  justify-content: center;
  align-items: center;

  //////////////
  // Variants //
  //////////////

  // BOTTOM
  :where(.#{$namespace}-drawer-container).bottom & {
    padding: 0 spacing.px(4) 0 0;
  }
}
