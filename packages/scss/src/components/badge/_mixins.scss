/* stylelint-disable scss/dollar-variable-pattern */
@use "../../variables" as *;

@use "../../functions/size";
@use "../../functions/spacing";

@use "../../mixins/transition";
@use "../../mixins/text";
@use "../../mixins/position";
@use "../../mixins/state";
@use "../../mixins/loader" as *;
@use "../../mixins/size" as msize;
@use "../../mixins/context";
@use "../../mixins/delete" as d;

$component: "badge";
$_properties-filled: ("background-color" "background-color", "color" "color", "border-color" "border-color");
$states: "default" "hover" "focus" "active";
$sizes: ("sm" "small", "md" "medium", "lg" "large");
$priorities: "primary" "secondary" "tertiary" "success" "danger" "info" "warning" "caution";
$border-width-default: 1;

/////////////
// Helpers //
/////////////

@mixin get-rules($component, $type: "normal", $priority, $properties) {
  & {
    @each $key, $value, $fallback in $properties {
      @if $fallback {
        @if $type == "normal" {
          #{$key}: var(--#{$component}-#{$priority}-#{$value}, --#{$component}-#{$priority}-#{$fallback});
        } @else {
          #{$key}: var(
            --#{$component}-#{$type}-#{$priority}-#{$value},
            --#{$component}-#{$type}-#{$priority}-#{$fallback}
          );
        }
      } @else {
        @if $type == "normal" {
          #{$key}: var(--#{$component}-#{$priority}-#{$value});
        } @else {
          #{$key}: var(--#{$component}-#{$type}-#{$priority}-#{$value});
        }
      }
    }
  }
}

@mixin get-priority($component, $type: "normal", $priority, $properties) {
  @include get-rules($component, $type, $priority, $properties);
}

////////////////////
// Variant - Size //
////////////////////

/* stylelint-disable-next-line scss/at-mixin-pattern */
@mixin label-container {
  > :is(div, span):not(:where(.#{$namespace}-icon-container, .#{$namespace}-avatar, .#{$namespace}-delete)) {
    @content;
  }

  .#{$namespace}-badge__label {
    @content;
  }
}

@mixin get-size($size) {
  $bw: size.px(--#{$component}-#{$size}-border-width, $border-width-default);
  $h: size.rem(--#{$component}-#{$size}-height);

  border-radius: size.px(--#{$component}-#{$size}-border-radius);
  border-width: $bw;
  border-style: solid;
  height: $h;

  @include label-container {
    font: var(--#{$component}-#{$size}-typography, inherit);
    padding: 0 size.px(--#{$component}-#{$size}-padding-label, 4);

    @if $size == "sm" {
      text-transform: uppercase;
    }
  }
}

@mixin variant-size {
  & {
    @each $short, $long in $sizes {
      @include msize.add($short, $long) {
        @include get-size($short);
      }
    }
  }
}

@mixin size-medium {
  @include get-size("md");
}

///////////////////////
// Variant - Default //
///////////////////////
/// Filled / Outlined

// @mixin variant-normal-priority-secondary {
//   background-color: var(--color-surface-neutral-subdued);
//   border-color: transparent;
//   $_properties-normal-secondary: "color";

//   @include get-priority($component, "normal", "secondary", $_properties-normal-secondary);
// }

@mixin variant-normal {
  & {
    @each $p in $priorities {
      @include context.add($p) {
        @include get-priority($component, "normal", $p, $_properties-filled);
      }
    }
  }
}

////////////////////
// Variant - Flat //
////////////////////

@mixin variant-flat-priority-secondary {
  @include get-rules($component, "flat", "secondary", $_properties-filled);
}

@mixin variant-flat {
  & {
    @each $p in $priorities {
      @include context.add($p) {
        @include get-priority($component, "flat", $p, $_properties-filled);
      }
    }
  }
}

@mixin variant-dot {
  &.dot {
    height: size.rem(8); //size.rem(--#{$component}-xs-height);
    width: size.rem(8); //size.rem(--#{$component}-xs-height);
    border-radius: 50%;
    border: none;
  }
}

/////////////
// Control //
/////////////

@mixin control {
  position: relative;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  border-radius: 9999px;
  white-space: nowrap;

  @include text.all-copy;
}

@mixin delete {
  @include d.delete;

  margin: spacing.rem(0) spacing.px(0);
  padding: spacing.rem(0) spacing.px(0);
  margin-right: spacing.px(1);

  &.sm {
    margin-right: spacing.px(0);
  }

  &.md {
    margin-right: spacing.px(1);
  }

  &.lg {
    margin-right: spacing.px(1.5);
  }
}

@mixin variant-positioned {
  &.top-right {
    // this strategy works for fixed size dot badges
    top: -1 * size.px(2);
    right: -1 * size.px(2);

    // this strategy works a bit better for variable size badges
    &:where(:not(.dot)) {
      transform: translate(15%, -15%);
    }

    :where(.#{$namespace}-avatar.lg) & {
      top: 0;
      right: 0;
    }
  }

  &.bottom-right {
    bottom: -1 * size.px(2);
    right: -1 * size.px(2);

    &:where(:not(.dot)) {
      transform: translate(15%, 15%);
    }

    :where(.#{$namespace}-avatar.lg) & {
      bottom: 0;
      right: 0;
    }
  }

  &.top-right,
  &.bottom-right {
    position: absolute;
    z-index: var(--elevation-global-1);

    &:not(.no-outline) {
      outline: 2px solid var(--color-foreground-contrast); // TODO: unhard
      outline-offset: 0;
    }
  }
}
